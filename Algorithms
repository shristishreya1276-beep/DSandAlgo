1. Binary search algorithm: Binary search is like we first define a new variable which is half the way, now try to compare if the number is smaller or greater or equal to the middle index number and if it's bigger we remove the first half and only search in the above part and so on. Execution time is O(log(n))
arr = [1,2,3,4]
x = int(input())
arr.sort()
left = 0
right = len(arr)-1
def BS(arr, left, right, x):
    y = (left+right)//2
    if x in arr:
        if int(arr[y]) == x:
            return y 
        elif int(arr[y]) < x:
            return BS(arr, y+1, right, x)
        elif int(arr[y]) > x:
            return BS(arr, left, y-1 , x)
    else:
        return -1
result = BS(arr, left, right, x)
if result != -1:
    print("Index is: " + str(result))
else:
    print("Doesn't exist")
    
2. Brute force Algorithm: Brute force is like we are trying with every item and checking if it's meet our condition or not. No extra algorithm or trick is applied to make the code effiecient. Execution time in 0(n).
arr = [1,2,3,4]
x = int(input())
arr.sort()
if x in arr:
    print(arr.index(x))
else:
    print("Doesn't exist")
    
3. Stack and Queque: Stack can be implemented as arrays or linked list  and queque can be implemented with circular array and doubly linked list. So the basic theory behind stack is that last element inserted will be the first element that will come out assume of it as the stack of utensils in a function, where the last utensil that is kept is the first one to be taken out and queque operate as fist in first out now think of it as queque for taking money out of ATM, the first person standing will be the first one to take money out and go. To implement stack and queque in python we will use deque from collection module as it takes less time compared to dealing with array. So, there are two basic functions push and pop, pup goes by append in python where append(whatever_we_want_to_add) is the format and pop() gives the last element in case of stack and leftpop() is used in queque.

The official terminologies used for stack are pop() for removing and push() for adding elements. And for queque it is enqueuqe() and dequeuqe() for adding and removing elements. 

Stack implementation:
from collections import deque
stack = deque()
stack.append(whatever_we_want_to_add)
stack.pop()

Queque implementation:
from collections import deque
queque = deque()
queque.append(whatever_we_want_to_add)
queque.popleft()

Coming to time complexity:
For checking if stack/queque empty: O(1)
For checking the size of stack/queque: 0(1)
For adding an element at last(append/push): 0(1)
For poping out an element: 0(1)

I guess, the constant time compelexities that make stack and queque useful. 
In queque, order matters and the thing that has been waiting for longest gets served first. Common examples of stacks and queques that we include in our everyday life involves undo and redo. Undo means removing our recent actions and storing it in form of stack and redo means accessing the stack which goes in the fashion last in first out. 

4. Sorting Algorithms
Why is sorting important? Searching through a general array takes 0(n) time complexity for execution however for a sorted array it takes 0(log(n)) time which can be considered as constant time 0(1) for higher value of n visualise it through a log graph.
1) Bubble sort: The most ineffecient sorting algorithm. We go by checking each element and its neighbours and if it's smaller we simply swap the positions. 
Code for bubble sort implementation:

a = list(map(int, input().split()))
def bubblesort(a):
    for i in range(len(a)):
        for j in range(0,len(a)-1):
            if a[j] > a[j+1]:
                a[j], a[j+1] = a[j+1],a[j]
    return a 
print(bubblesort(a))

2) Selection sort: As the name suggests, we try to select the smallest element and then swap it with elements in the sorted section. 

Code implementation in python:


